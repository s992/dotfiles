#!/bin/sh

function android-version() {
  aapt dump badging $1 | grep version
}

function ctx() {
  if [ -z "$1" ]; then
    kubectl config get-contexts
  else
    kubectl config use-context $1
  fi
}

function reload-zsh() {
  # Clear all functions and aliases first so they reload
  unhash -mf "*"
  unhash -ma "*"

  source ~/.zshrc
}

function plogcat() {
  local pid=$(adb shell ps | rg "$1" | cut -c10-15)
  adb logcat | rg "$pid"
}

function pyenv() {
  source "$HOME/virtualenvs/$1/bin/activate"
}

function cs() {
  open -a "Google Chrome" "https://devhints.io/$1"
}

function csh() {
  local topic=$1
  shift

  local query=$@

  if [ -n "$query" ]; then
    query=$(echo $query | tr " " +)
  fi

  curl https://cht.sh/$topic/$query
}

function fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

function fco() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD |
    sed "s/.* //" | sed "s#remotes/[^/]*/##" |
    sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}'
  ) || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf --no-hscroll --no-multi --delimiter="\t" -n 2 \
        --query "$1" \
        --ansi --preview="git logs -200 $(echo {+2..} | awk '{print ".."$0}') 2>/dev/null || git logs -200 $(echo {+2..} | awk '{print "..origin/"$0}')"
  ) || return

  git checkout $(echo "$target" | awk '{print $2}')
}

function fshow() {
  git logs |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

function fstash() {
  git stash list \
    --pretty=format:"%C(red)%h%C(reset) - %C(dim yellow)%C(bold magenta)%gd%C(dim yellow)%C(reset) - %<(70,trunc)%s %C(green)(%cr) %C(reset)" \
    | fzf \
      -m \
      --ansi \
      --preview="git -c color.ui=always stash show {+1}" \
      --bind "enter:execute(git show -p {+1})" \
      --bind "ctrl-p:execute(git stash pop {+3})+abort" \
      --bind "ctrl-b:execute(git stash branch stash-{+1} {+1})+abort" \
      --bind "ctrl-x:execute-silent(git stash drop {+3})+abort"
}

function gifenc() {
  local in=$1
  local out=$2
  local scale=$3

  if [ -z "$scale" ]; then
    scale=320
  fi

  palette="/tmp/palette.png"

  filters="fps=30,scale=$scale:-1:flags=lanczos"

  ffmpeg -v warning -i $in -vf "$filters,palettegen" -y $palette
  ffmpeg -v warning -i $in -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $out
}

function adb-wifi() {
  local port="5555"
  local ip=$(adb shell netcfg | awk 'NR==1{print $3}' | sed -E 's/\/[0-9]+$//g')

  adb tcpip $port
  adb connect $ip:$port
}

function dni() {
  local book=$1
  shift
  local note=$@

  dnote add $book -c "$note"
}

function ni() {
  local book=$1
  shift
  local note=$@

  note add $book -c "$note"
}

function ncat() {
  local book=$1
  local note=$2

  note cat $book $note | mdcat
}

function dnc() {
  local book=$1
  local index=$2

  dnote cat $book $index | awk '/content\-+$/{flag=1;next} /\-{55}$/{flag=0}flag' | mdcat
}

## stealing some functions from https://github.com/mathiasbynens/dotfiles

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

function chrome() {
  open -a "Google Chrome" "$1"
}

function reset-origin() {
  git reset --hard origin/$(git symbolic-ref --short HEAD)
}

function epoch() {
  date -j -f %s $(($1 / 1000)) '+%m/%d/%Y %H:%M:%S'.$(($1 % 1000))
}

function utc() {
  echo $1 | cut -c 1-10 | xargs date -r
}
